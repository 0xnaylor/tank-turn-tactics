<%- include('../../partials/head.html') %>

<link rel="stylesheet" href="css/game.css"/>

<body>

<div id="statsPanel">
    <span id="deathMessage"></span>
    <a id="openVote">VOTE</a>
    <span>│</span>
    <span id="gameName"></span>
    <span id="gameTime"></span>
    <span id="actionInterval"></span>
    <span id="actionsPerInterval"></span>
    <span>│</span>
    <span class="options">Range Mode:</span><a id="rangeMode" style="display: inline-block"></a>
    <span class="options">Range Display:</span><a id="rangeDisplay" style="display: inline-block"></a>


</div>

<div id="gameContainer"></div>

<div id="winScreen" class="panel popupScreen">
    <h1>Mission Complete</h1>
    <p></p>
    <a href="/">Return to menu</a>
</div>

<div id="voteScreen" class="panel popupScreen">
    <h2>Jury</h2>
    <p></p>
    <div id="votes"></div>
    <a id="closeVote">Close</a>
</div>

<div id="infoPanel" class="panel">
    <h3>
        <span id="colorBoxDiv" style="max-width: 20px; max-height: 20px; overflow: hidden; display: inline-block">
            <label for="colorBox"></label>
            <input type="color" id="colorBox" value="#ffffff" />
        </span>
        <span id="name"></span>
    </h3>
    <p id="id"></p>

    <p id="actions"></p>
    <div class="upgrade" data-upgrade="health" data-cost=2>
        <span id="health"></span>
        <span class="actionsToAdd"></span>
        <span>
            <a class="minus">-</a>
            <a class="plus">+</a>
            <span>[2]</span>
        </span>
    </div>
    <div class="upgrade" data-upgrade="range" data-cost=1>
        <span id="range"></span>
        <span class="actionsToAdd"></span>
        <span>
            <a class="minus">-</a>
            <a class="plus">+</a>
            <span>[1]</span>
        </span>
    </div>

    <span class="confirm"><a class="cancel">✘</a><a class="confirm">✓</a></span>

    <div id="logs"></div>
</div>

<div id="hintPanel" class="panel">
    <h3></h3>
    <p></p>
    <p id="minorHint"></p>
</div>


<script type="text/javascript" src="js/game-engine/Game.js"></script>
<script type="text/javascript" src="js/game/background/GridBox.js"></script>
<script type="text/javascript" src="js/game/objects/Tank.js"></script>
<script type="text/javascript" src="js/game/gui/SelectionSquare.js"></script>
<script type="text/javascript" src="js/game/gui/ActionPopup.js"></script>
<script type="text/javascript" src="js/game/gui/MoveGui.js"></script>
<script type="text/javascript" src="js/game/gui/TargetGui.js"></script>
<script type="text/javascript" src="js/game/gui/target/AttackGui.js"></script>
<script type="text/javascript" src="js/game/gui/target/GiveGui.js"></script>

<script>
    const RANGE_MODES = { CIRCLE: "RADIUS", SQUARE: "SQUARE" }
    let rangeMode = localStorage.getItem('rangeMode') || RANGE_MODES.CIRCLE
    const rangeModeAnchor = document.querySelector('#rangeMode')
    rangeModeAnchor.innerHTML = rangeMode

    rangeModeAnchor.onclick = () => {
        if (rangeMode === RANGE_MODES.CIRCLE) {
            rangeMode = RANGE_MODES.SQUARE
        } else {
            rangeMode = RANGE_MODES.CIRCLE
        }
        localStorage.setItem('rangeMode', rangeMode)
        rangeModeAnchor.innerHTML = rangeMode
    }

    const RANGE_DISPLAY = { SELECTED: "SELECTED", ALL: "ALL" }
    let rangeDisplay = localStorage.getItem('rangeDisplay') || RANGE_DISPLAY.SELECTED
    const rangeDisplayAnchor = document.querySelector('#rangeDisplay')
    rangeDisplayAnchor.innerHTML = rangeDisplay

    rangeDisplayAnchor.onclick = () => {
        if (rangeDisplay === RANGE_DISPLAY.SELECTED) {
            rangeDisplay = RANGE_DISPLAY.ALL
        } else {
            rangeDisplay = RANGE_DISPLAY.SELECTED
        }
        localStorage.setItem('rangeDisplay', rangeDisplay)
        rangeDisplayAnchor.innerHTML = rangeDisplay
    }
</script>

<script>
    let game;
    let ALL_PLAYERS = []
    let USER_PLAYER;
    let gameOver
    let deltaActions = 0

    // States
    let isDead;

    let reFetching = false;

    const ACTION_STATES = {
        SELECT: "select",
        BUTTONS: "buttons",
        ATK: "attack",
        MV: "move",
        GV: "give"
    }
    let actionState = ACTION_STATES.BUTTONS;

    // Flags

    let justCancelledActionsGui = false;
    let justSelectedActionsGui = false;

    // Scores
    const upgradeButtons = []

    function initGame(gameToInit, firstTime = false) {
        game = gameToInit;

        USER_PLAYER = game.players.find(player => player.user_id === game.user_id)
        ALL_PLAYERS = game.players

        game.players = game.players.filter(p => p.health > 0)

        isDead = USER_PLAYER.health <= 0;
        if (isDead) {
            document.querySelector("#openVote").style.display = 'inline-block'
        }

        gameOver = false;

        if (game.players.filter(player => player.health > 0).length <= 1) {
            gameOver = true;

            document.querySelector("#winScreen").style.display = 'block'
            document.querySelector("#winScreen p").innerHTML = game.players.find(player => player.health > 0).name + " has emerged victorious"
        }

        if (firstTime) {
            actionState = USER_PLAYER.actions > 0 ? ACTION_STATES.BUTTONS : ACTION_STATES.SELECT
        }

        if (gameOver) {
            actionState = ACTION_STATES.SELECT
            if (upgradeButtons) disableUpgrades()
        }
    }

    initGame(JSON.parse(`<%- JSON.stringify(game) %>`), true);

    // Fetching
    function refetch(forced = true) {
        if (forced) {
            reFetching = true;
            deltaActions = 0
        }
        if (forced) showLoading()
        return fetch(`/game/${ game._id }`, { method: "GET" })
            .then(res => res.json())
            .then(newGame => {
                initGame(newGame)

                updateTanks(false, forced)
                updateInfo()
                updateLogs(forced)
                if (forced) {
                    actionGuis.forEach(gui => gui.init())
                }
                firstFetch = false;

                if (gameOver && guiDriver) guiDriver.components = []
            })
            .finally(() => {
                reFetching = false;
                hideLoading()
            })
    }

    function showLoading() {document.body.className = 'waiting'}
    function hideLoading() {document.body.className = ''}

    const size = game.size
    const GRID_SIZE = 50;

    // Flags
    let firstFetch = true;


    // Colors
    const c_gridLabel = 'rgba(255,255,255,0.46)';
    const c_gridLabelSelected = 'rgb(117,255,234)';

    const c_playerRange = 'rgb(117,255,234)'
    const c_enemyRange = '#ff0000'

    const c_moveBlock = 'rgba(255,255,255,0.3)'
    const c_moveCancel = 'rgba(255,242,101,0.2)'
    const c_moveOutOfRange = 'rgba(255,0,0,0.29)'
    const c_moveLine = '#60d5ff'
    const c_atkRange = 'rgba(255,0,0,0.88)'
    const c_giveRange = 'rgba(121,255,113,0.84)'

    const c_atkTarget = '#ffd271'
    const c_atkMarkedTarget = '#ff0000'
    const c_atkConfirming = 'rgba(255,0,0,0.33)'

    const c_giveLine = '#73f56b'
    const c_giveConfirming = 'rgba(115,245,107,0.3)'


    // Set up
    const parentDiv = document.querySelector('#gameContainer')
    const GRID_PADDING = GRID_SIZE * 2;
    const FOOTER_PADDING = 150;
    const RIGHT_PADDING = 450;
    const gameDim = {
        width: size.width * GRID_SIZE + GRID_PADDING + RIGHT_PADDING,
        height: size.height * GRID_SIZE + GRID_PADDING + FOOTER_PADDING
    }

    // Tank Selection

    function centerTank(tank) {
        scrollTo({
            top: tank.box.y + GRID_PADDING - screen.height/2,
            left: tank.box.x + GRID_PADDING - screen.width/2,
            behavior: 'smooth'
        })
    }

    let tankIndex = 0;

    addEventListener('keydown', e => {
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {

            if (e.key === "ArrowDown" || e.key === 'ArrowRight') {
                tankIndex++;
                if (tankIndex >= tankDriver.components.length) tankIndex = 0
            } else {
                tankIndex--;
                if (tankIndex < 0) tankIndex = tankDriver.components.length-1
            }

            selectedTank = tankDriver.components[tankIndex]
            centerTank(selectedTank)
            updateInfo()
        }

        if (e.key === ' ' && userTank) {
            selectedTank = userTank
            centerTank(userTank)
            updateInfo()
        }
    })

    // --------------------------------------------BACKGROUND-------------------------------------------------

    const backgroundDriver = initDriver(parentDiv, Driver.MODE_PASSIVE, gameDim)
    backgroundDriver.canvas_ctx.save()
    backgroundDriver.canvas_ctx.font = '12px Arial'

    let hoveredBox = { x: GRID_SIZE, y: GRID_SIZE, coords: { x: 0, y: 0 } }

    const grid = [];
    for (let i = 0; i < size.width; i++) {
        grid.push([])
        for (let j = 0; j < size.height; j++) {
            const gridBox = new GridBox({
                x: i,
                y: j
            }, GRID_PADDING + i * GRID_SIZE, GRID_PADDING + j * GRID_SIZE, GRID_SIZE, GRID_SIZE, (i + j) % 2 === 0 ? 'rgba(7,129,0,0.4)' : 'rgba(52,52,52,0.11)');

            grid[i].push(gridBox)
            backgroundDriver.components.push(gridBox)
        }
    }

    // Grid labels
    backgroundDriver.components.push(new class extends Driver.PassiveComponent {
        redraw = driver => {
            driver.canvas_ctx.textAlign = 'center'

            // Selected position
            const pos = selectedTank.player.position;

            for (let i = 0; i < game.size.height; i++) {
                driver.canvas_ctx.fillStyle = pos.y === i ? selectedTank.player.color : c_gridLabel
                driver.canvas_ctx.fillText(`${ i + 1 }`,
                    GRID_PADDING - GRID_SIZE + GRID_SIZE / 2,
                    i * GRID_SIZE + GRID_SIZE / 2 + GRID_PADDING)
            }
            for (let i = 0; i < game.size.width; i++) {
                driver.canvas_ctx.fillStyle = pos.x === i ? selectedTank.player.color : c_gridLabel
                driver.canvas_ctx.fillText(getChar(i),
                    i * GRID_SIZE + GRID_SIZE / 2 + GRID_PADDING,
                    GRID_PADDING - GRID_SIZE + GRID_SIZE / 2)
            }
        }
    })

    // --------------------------------------------TANKS-------------------------------------------------

    const tankDriver = initDriver(parentDiv, Driver.MODE_ACTIVE, gameDim)
    tankDriver.canvas_ctx.save();
    tankDriver.canvas_ctx.font = 'bold 15px Uni-Sans'

    let selectedTank = null;

    let userTank;

    function updateTanks(firstTime = false, forced = false) {
        Tank.count = 0;
        tankDriver.components = game.players.map(player => new Tank(player))

        userTank = tankDriver.components.find(tank => tank.player.user_id === game.user_id) // Init selected tank

        if (firstTime || forced) {
            if (!isDead) {
                selectedTank = userTank
            }
        }

        if (firstTime && userTank) {
            centerTank(userTank)
        }

        if (!selectedTank) selectedTank = tankDriver.components[0]
        else if (!forced) selectedTank = tankDriver.components.find(t => t.box === selectedTank.box)
    }

    updateTanks(true);

    const guiDriver = initDriver(parentDiv, Driver.MODE_ACTIVE, gameDim)

    const xOffset = 50;

    const moveButton = new ActionPopup("Move", -xOffset - 1, "right", ACTION_STATES.MV, c_moveLine)
    const attackButton = new ActionPopup("Attack", 0, "center", ACTION_STATES.ATK, c_atkTarget)
    const giveButton = new ActionPopup("Support", xOffset, "left", ACTION_STATES.GV, c_giveLine)

    const actionPopups = [ moveButton, attackButton, giveButton ]

    guiDriver.components.push(...actionPopups)

    const moveGui = new MoveGui()
    const attackGui = new AttackGui()
    const giveGui = new GiveGui()

    actionGuis = [ moveGui, attackGui, giveGui ]

    if (userTank)
        guiDriver.components.push(...actionGuis)


    // Selection

    guiDriver.components.push(new SelectionSquare())

    backgroundDriver.run();
    tankDriver.run(32);
    guiDriver.run(32)

    updateInfo()
    setTimeout(updateLogs, 5)

    // ---------------------------------------- INFO PANEL ------------------------------------------------------------
    function updateInfo() {
        // Info panel
        const player = selectedTank.player;
        const isUser = userTank === selectedTank

        if (isUser) {
            document.querySelector('#colorBoxDiv').style.display = 'inline-block'
        } else {
            document.querySelector('#colorBoxDiv').style.display = 'none'
        }

        document.querySelector('#name').innerHTML = shortenName(player.name)
        document.querySelector('#id').innerHTML = ` &lt${ getChar(player.position.x) }${ player.position.y + 1 }&gt ${ player._id }`
        if (isUser) {
            document.querySelector('#actions').innerHTML = "Energy: " + player.actions + (deltaActions > 0 ? ` → ${ player.actions - deltaActions }` : '')
        } else {
            document.querySelector('#actions').innerHTML = "Energy: ?"
        }
        if (player.actions === 0) {
            document.querySelector('#actions').style.color = 'red'
        } else {
            document.querySelector('#actions').style.color = 'white'
        }

        document.querySelector('#health').innerHTML = "Health: " + player.health
        document.querySelector('#range').innerHTML = "Range: " + player.range
    }

    const colorPickerInput = document.querySelector("#colorBox")

    colorPickerInput.value = userTank?.player.color ?? "#ffffff";

    colorPickerInput.onchange = e => {
        const color = encodeURIComponent(e.target.value)
        console.log(`/action/${ game._id }/color/${ color }`)
        fetch(`/action/${ game._id }/color/${ color }`, { method: 'PATCH' })
            .then(() => console.log("Colors updated!"))
    }

    // ---------------------------------------- LOG PANEL ------------------------------------------------------------


    function updateLogs(forced = true) {
        // Logs
        const logDiv = document.querySelector('#logs');

        let newLogs;

        if (!this.previousActionLog) {
            newLogs = game.actionLog
            this.previousActionLog = game.actionLog;
        } else {
            newLogs = game.actionLog.slice(this.previousActionLog.length, game.actionLog.length)

            this.previousActionLog = game.actionLog;
        }

        newLogs.forEach(action => {
            let date = new Date(action.createdAt)
            let message = "[" + date.toLocaleTimeString('en-GB', {
                hour12: false,
                hour: '2-digit',
                minute: '2-digit'
            }) + "] ";

            const player = ALL_PLAYERS.find(p => p._id === action.player_id)
            const target = ALL_PLAYERS.find(p => p._id === action.target_id)

            let playerName;
            let playerStyle;

            if (player) {
                playerStyle = player._id === USER_PLAYER._id ? 'userPlayerName' : 'playerName'
                playerName = shortenName(player.name)
            }

            let targetName;
            let targetStyle;

            if (target) {
                targetStyle = target._id === USER_PLAYER._id ? 'userPlayerName' : 'playerName'
                targetName = shortenName(target.name)
            }

            let divStyle
            if (player && target)
                divStyle = player._id === USER_PLAYER._id || (target && target._id === USER_PLAYER._id) ? 'playerActionLog' : ''


            switch (action.action) {
                case 'move':
                    const finalPosition = action.positions[action.positions.length - 1]
                    message += `<span class="${ playerStyle }">${ playerName }</span> ➟ <span class="location">${ getChar(finalPosition.x) }${ finalPosition.y + 1 }</span>`
                    break;
                case 'attack':
                    const symbol = action.killed ? '💀' : '⚔'
                    if (target._id === USER_PLAYER._id && action.killed) {
                        statsPanel.querySelector('#deathMessage').innerHTML = `You were killed by ${ player.name }`
                    }
                    message += `<span class="${ playerStyle }">${ playerName }</span> ${ symbol } <span class="${ targetStyle }">${ targetName }</span>`
                    break;
                case 'give':
                    message += `<span class="${ playerStyle }">${ playerName }</span> 🔰 <span class="${ targetStyle }">${ targetName }</span>`
                    break;
                case 'vote':
                    switch (action.vote) {
                        case 'jury':
                            if (action.vote_tied)
                                message += `<span class="ghost">GHOSTS are undecided</span>`
                            else
                                message += `<span class="ghost">GHOSTS</span> 🔰 <span class="${ targetStyle }">${ targetName }</span>`
                            break;
                    }
                    break;
                default:
                    message = '';
            }
            if (message) logDiv.innerHTML += `<p class="${ divStyle }">${ message }</p>`
        })

        if (forced || newLogs.length > 0) logDiv.scrollTop = logDiv.scrollHeight;
    }

    // ---------------------------------------- HINT PANEL ------------------------------------------------------------
    function updateHint(title, text, minorHint = ".", color = 'white') {
        if (!title) {
            document.querySelector('#hintPanel').style.display = 'none';
        }

        document.querySelector('#hintPanel').style.display = 'block';
        document.querySelector('#hintPanel h3').innerHTML = title;
        document.querySelector('#hintPanel p').innerHTML = text;

        document.querySelector('#hintPanel #minorHint').innerHTML = minorHint
        if (minorHint === ".") {
            document.querySelector('#hintPanel #minorHint').classList.add("hidden")
        } else {
            document.querySelector('#hintPanel #minorHint').classList.remove("hidden")
        }

        document.querySelector('#hintPanel h3').style.color = color;
    }


    // ---------------------------------------- UPGRADES PANEL ------------------------------------------------------------
    let actionsToAdd = {}

    function disableUpgrades() {
        upgradeButtons.forEach(a => a.classList.add('disabled'))
    }

    function enableUpgrades() {
        upgradeButtons.forEach(a => a.classList.remove('disabled'))
    }

    function resetUpgrades() {
        deltaActions = 0;
        updateInfo()

        Object.keys(actionsToAdd).forEach(k => {
            deltaActions -= actionsToAdd[k]
            actionsToAdd[k] = 0
        })

        document.querySelectorAll('.actionsToAdd').forEach(n => n.innerHTML = '')
    }

    document.querySelectorAll("#infoPanel .upgrade").forEach(node => {
        const upgradeName = node.dataset.upgrade;
        const actionCost = parseInt(node.dataset.cost);

        upgradeButtons.push(node.querySelector("a.plus"))
        upgradeButtons.push(node.querySelector("a.minus"))
        upgradeButtons.push(document.querySelector("a.cancel"))
        upgradeButtons.push(document.querySelector("a.confirm"))

        node.querySelector("a.plus").onclick = () => {
            if (node.querySelector("a.plus").classList.contains("disabled")) return;
            if (selectedTank && deltaActions + actionCost > selectedTank.player.actions) return;

            if (actionsToAdd[upgradeName]) {
                actionsToAdd[upgradeName] += 1;
                deltaActions += actionCost
            } else {
                actionsToAdd[upgradeName] = 1;
                deltaActions += actionCost
            }

            node.querySelector(".actionsToAdd").innerHTML = actionsToAdd[upgradeName] > 0 ? `+${ actionsToAdd[upgradeName] }` : ''
            updateInfo()
        }

        node.querySelector("a.minus").onclick = () => {
            if (node.querySelector("a.minus").classList.contains("disabled")) return;

            if (actionsToAdd[upgradeName] !== undefined) {
                if (actionsToAdd[upgradeName] > 0) {
                    actionsToAdd[upgradeName] -= 1;
                    deltaActions -= actionCost
                }
            } else {
                actionsToAdd[upgradeName] = 0;

            }

            node.querySelector(".actionsToAdd").innerHTML = actionsToAdd[upgradeName] > 0 ? `+${ actionsToAdd[upgradeName] }` : ''
            updateInfo()
        }
    })

    document.querySelector("#infoPanel .cancel").onclick = () => {
        if (document.querySelector("a.cancel").classList.contains("disabled")) return;
        resetUpgrades()
    }

    document.querySelector("#infoPanel .confirm").onclick = () => {
        if (document.querySelector("a.cancel").classList.contains("disabled")) return;

        disableUpgrades()

        const fetchPromises = Object.keys(actionsToAdd).map(k =>
            fetch(`/action/${ game._id }/upgrade/${ k }/actions/${ actionsToAdd[k] }`, { method: 'POST' })
        )

        Promise.all(fetchPromises).then(() => {
            updateInfo()
            enableUpgrades()
            refetch()
            actionsToAdd = {}
        })

        document.querySelectorAll('.actionsToAdd').forEach(n => n.innerHTML = '')
        updateInfo()
    }

    // ---------------------------------------- STATS PANEL ------------------------------------------------------------

    const statsPanel = document.querySelector('#statsPanel')

    statsPanel.querySelector('#gameName').innerHTML = game.name;
    if (!gameOver) {
        statsPanel.querySelector('#gameTime').innerHTML = dateTimeDiff(new Date(), new Date(game.startedAt))
        setInterval(() => {
            statsPanel.querySelector('#gameTime').innerHTML = dateTimeDiff(new Date(), new Date(game.startedAt))
        }, 1000)
    } else {
        statsPanel.querySelector('#gameTime').innerHTML = dateTimeDiff(new Date(), new Date(game.startedAt))
    }

    statsPanel.querySelector('#actionInterval').innerHTML = "Interval Time: " + game.turnTime + " hrs";
    statsPanel.querySelector('#actionsPerInterval').innerHTML = "Actions per interval: " + game.actionsPerInterval;

    // ---------------------------------------- VOTE PANEL ------------------------------------------------------------

    const voteScreen = document.querySelector("#voteScreen")

    initVoteScreen()

    function initVoteScreen() {
        if (reFetching) return;

        let voteType = "vote_jury"

        const votes = calculateVotePercentages(voteType)

        let message;

        switch (voteType) {
            case "vote_jury":
                message = "Select a player to be awarded AP"
                break;
            default:
                message = ""
        }

        voteScreen.querySelector("p").innerHTML = message;
        voteScreen.querySelector("div#votes").innerHTML = ""

        game.players.forEach(p => {
            voteScreen.querySelector("div#votes").appendChild(createVoteRadio(p, votes[p._id], voteType))
        })
    }

    function createVoteRadio(player, percent, name) {
        const radioDiv = document.createElement("div")

        const radioInput = document.createElement("input")
        radioInput.id = player._id;
        radioInput.type = 'radio'
        radioInput.name = name
        radioInput.value = player._id
        radioInput.checked = USER_PLAYER[name] === player._id
        radioInput.addEventListener("change", e => {
            USER_PLAYER[name] = player._id
            showLoading()
            initVoteScreen()
            radioDiv.querySelectorAll("input").forEach(i => i.disabled = true)
            fetch(`/action/${ game._id }/vote/${ name }/player/${ e.target.value }`, { method: "PATCH" })
                .catch(e => {
                    alert(e)
                    initVoteScreen()
                })
                .finally(() => {
                    radioDiv.querySelectorAll("input").forEach(i => i.disabled = false)
                    hideLoading()
                })
        })

        const label = document.createElement("label")
        label.htmlFor = player._id
        label.innerHTML = player.name
        label.style.color = player.color;

        const text = document.createElement("span")
        text.innerHTML = ": " + percent + "%";

        radioDiv.appendChild(radioInput)
        radioDiv.appendChild(label)
        radioDiv.appendChild(text)
        radioDiv.appendChild(document.createElement("br"))

        return radioDiv;
    }

    function calculateVotePercentages(voteType) {
        const deadPlayers = ALL_PLAYERS.filter(p => p.health <= 0)

        const votes = {}

        game.players.forEach(p => votes[p._id] = 0)

        let voteCount = 0;

        for (const voter of deadPlayers) {
            if (voter[voteType]) {
                votes[voter[voteType]]++;
                voteCount++;
            }
        }

        const votePercent = votes;

        Object.keys(votePercent).forEach(k => {
            if (voteCount > 0) {
                votePercent[k] = votePercent[k]/voteCount*100;
            } else {
                votePercent[k] = 0;
            }
        })

        return votePercent;
    }

    document.querySelector("#openVote").onclick = () => {
        voteScreen.style.display = 'block'
        initVoteScreen()
    }

    document.querySelector("#closeVote").onclick = () => {
        voteScreen.style.display = 'none'
    }

    setInterval(() => {
        if (!reFetching) refetch(false);
    }, 1000)

    if (upgradeButtons && gameOver) disableUpgrades()
</script>

<%- include('../../partials/footer.html') %>
</body>
