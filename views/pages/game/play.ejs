<%- include('../../partials/head.html') %>

<body>
<h1>Game</h1>
<div id="game"></div>
<div id="stats">
    <button id="attack">Attack</button>
    <button id="give">Give</button>
    <h3 id="name"></h3>
    <h4 id="actions"></h4>
    <span id="health"></span>
    <button id="healthUpgrade" style="display: inline-block; margin-left: 5px">Upgrade</button>
    <br>
    <span id="range"></span>
    <button id="rangeUpgrade" style="display: inline-block; margin-left: 5px">Upgrade</button>
</div>


<script>
    let playerId = 0;
    let gameId

    let gameObject;
    let players;
    let USER_PLAYER;

    let selectedPlayer;
    let selectedId;

    async function fetchData() {
        const urlParams = new URLSearchParams(window.location.search);
        gameId = urlParams.get('game')

        // Get data
        const gameRes = await fetch(`/game/${ gameId }`, { method: 'GET' });
        const gameResponse = await gameRes.json();

        userPlayer = await (await fetch(`/game/${ gameId }/player`, { method: 'GET' })).json()
        playerId = userPlayer.user_id

        gameObject = gameResponse.game;
        players = gameResponse.players;

        dispatchEvent(new CustomEvent('data-updated', { game: gameObject, player: userPlayer, players: players }))
    }

    function setStats(player) {

        if (player.actions <= 0) {
            document.querySelector('#healthUpgrade').disabled = true;
            document.querySelector('#rangeUpgrade').disabled = true;
            document.querySelector('#attack').disabled = true;
            document.querySelector('#give').disabled = true;
        } else {
            document.querySelector('#healthUpgrade').disabled = false;
            document.querySelector('#rangeUpgrade').disabled = false;
            document.querySelector('#attack').disabled = false;
            document.querySelector('#give').disabled = false;
        }

        if (player._id !== userPlayer._id) {
            document.querySelector('#attack').addEventListener("click", () => {
                // Attack
                fetch(`/action/${ gameId }/attack/${ player._id }`, { method: 'POST' })
                    .then(fetchData)
                    .catch(e => console.log(e))
            })

            document.querySelector('#give').addEventListener("click", () => {
                // Attack
                fetch(`/action/${ gameId }/give/${ player._id }/actions/1`, { method: 'POST' })
                    .then(fetchData)
                    .catch(e => console.log(e))
            })
        } else {
            document.querySelector('#attack').disabled = true;
            document.querySelector('#give').disabled = true;
        }

        document.querySelector('#stats #name').innerHTML = player.name + ":";
        document.querySelector('#stats #actions').innerHTML = "Action points: " + player.actions;
        document.querySelector('#stats #health').innerHTML = "Health: " + player.health;
        document.querySelector('#stats #range').innerHTML = "Range: " + player.range;

        document.querySelector('#healthUpgrade').onclick = () => {
            fetch(`/action/${ gameId }/upgrade/health`, { method: 'POST' }).then(fetchData)
        }

        document.querySelector('#rangeUpgrade').onclick = () => {
            fetch(`/action/${ gameId }/upgrade/range`, { method: 'POST' }).then(fetchData)
        }
    }

    function draw() {
        const size = gameObject.size;

        const grid = [];

        for (let x = 0; x < size.width; x++) {
            grid.push([])

            for (let y = 0; y < size.height; y++) {
                const playerAtPosition = players.find(player => player.position.x === x && player.position.y === y)

                if (playerAtPosition) {
                    grid[x].push(playerAtPosition)
                } else {
                    grid[x].push(false)
                }
            }
        }

        drawGrid(document.querySelector("#game"), size.width, size.height, 50, 50, grid);
    }


    /**
     *
     * @param {HTMLElement} element
     * @param {number} width
     * @param {number} height
     * @param {number} xSize
     * @param {number} ySize
     * @param {Array} gridArray
     */
    function drawGrid(element, width, height, xSize, ySize, gridArray) {
        const gridElement = document.createElement("div");

        element.innerHTML = ''
        element.appendChild(gridElement)

        gridElement.id = "main";
        gridElement.className = "gridContainer";

        for (let row = 0; row < width; ++row) {
            let rowElement = gridElement.appendChild(
                document.createElement("div")
            );
            rowElement.className = "row";
            rowElement.id = "row" + row;
            rowElement.style.height = `${ ySize + 2 }px`;

            for (let col = 0; col < height; ++col) {
                let box = rowElement.appendChild(document.createElement("canvas"));
                box.className = "box";
                box.style.width = `${ xSize }px`;
                box.style.height = `${ ySize }px`;

                box.position = { x: col, y: row };

                boxInit(box, gridArray[row][col], row, col)
            }
        }
    }

    function boxInit(box, player, x, y) {
        if (player) box.addEventListener("click", () => {
            console.log("Selected player " + player.name + (player.user_id === userPlayer.user_id ? " (you)" : ''))
            selectedPlayer = player;
            selectedId = player._id;
            setStats(player)
            draw()
        })

        if (player && player.user_id === userPlayer.user_id && player.health > 0) {
            colorCanvas(box, "#ce3cff")
        } else if (player && player.health > 0) {
            colorCanvas(box, "rgb(255,0,0)")
        } else {
            // Move
            if ((Math.abs(x - userPlayer.position.x) < 2 && Math.abs(y - userPlayer.position.y) < 2)) {
                colorCanvas(box, "rgba(75,222,255,0.16)")

                box.addEventListener("click", () => {
                    if (userPlayer.actions <= 0) {
                        alert("You have no action points left!");
                        return;
                    }

                    let formData = new FormData();
                    formData.append('x', x)
                    formData.append('y', y)

                    fetch(`/action/${ gameId }/move/${ x }/${ y }`, {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ x: x, y: y })
                    })
                        .then(fetchData)
                        .catch(e => console.log(e))
                })
            } else if (Math.abs(x - selectedPlayer.position.x) <= selectedPlayer.range && Math.abs(y - selectedPlayer.position.y) <= selectedPlayer.range) {
                colorCanvas(box, "rgba(255,155,84,0.11)")
            }
        }
    }

    /**
     *
     * @param {HTMLCanvasElement} canvasElement
     * @param {string} color
     */
    function colorCanvas(canvasElement, color) {
        const width = canvasElement.width;
        const height = canvasElement.height;

        const ctx = canvasElement.getContext('2d');
        ctx.fillStyle = color
        ctx.fillRect(0, 0, width, height)
    }

    addEventListener('data-updated', async () => {
        console.log("Data updated!")
        if (selectedPlayer === undefined) {
            console.log("Init selected player")
            selectedPlayer = userPlayer
            selectedId = userPlayer._id;
        }

        if (userPlayer._id === selectedPlayer._id) {
            selectedPlayer = userPlayer;
        }


        for (const player of players) {
            if (player._id === selectedPlayer._id) {
                selectedPlayer = player;
                break;
            }
        }

        if (selectedPlayer.health <= 0) selectedPlayer = userPlayer;

        draw();
        setStats(selectedPlayer)
    })

    fetchData()

</script>

</body>


<style>
    .box {
        border: 1px dashed #737373;
        margin: 0;
    }

    .row {
        margin: 0
    }

    #health {
        color: green;
    }

    #range {
        color: orange;
    }

    button:disabled {
        text-decoration: line-through;
    }

</style>

<%- include('../../partials/footer.html') %>